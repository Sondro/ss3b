#!/usr/bin/env bash

# author: Mike Gauthier <mikeg@3cx.org>
#
# ss3b - Simple S3 Backup
# A very simple script that reads from a file listing the directories
# one wishes to have backed up, tars up said directories one at a time,
# optionally compresses them (default=yes ), and optionally encrpyt the
# archive using a symetric cypher (gnugp - using CAST5 algorithm by
# default - default=no). Finally, it will upload to specified S3 bucket
# a directory named 

set -o nounset
set -o pipefail
IFS=$'\n\t'

# There are no configuration options in this script. All config options
# can be found in your config file (default: /etc/ss3b/ss3b.conf)

#######################################################################
#######################################################################

# Setting the program name for later use.
PROGNAME=$(basename $0)

# "Declaring" some variables we'll use later.
# Why? See 'set -o unset'. It's easier to check the status of a variable
# with [ "$var" = "" ] than it is with [ "${var-}" = "" ].
# Also setting default value where needed.
DEFCONFIG="/etc/ss3b/ss3b.conf"
config=""
clo_listfile=""
clo_compress=""
clo_encrypt=""
clo_bucket=""
listfile=""
compress="no" # Default is not to compress
encrypt="no"  # Default is not to encrypt
bucket=""
passphrase=""
aws_access_key_id=""
aws_secret_access_key=""

# // FUNCTIONS //

# Output debug information to the debug log (e.g. ./ssb3-debug.out) if the
# -d option passed on the command line or debug="yes" in the config file.
# To use, simple pass a string to this function. The first time this function
# is used, an entry will be made explaining debugging has started for the
# current PID. _DEBUGLOG needs to be set before 

_DEBUG=""
function DEBUG {
	_DEBUGLOG="./debug-$(basename $0).out"
	if [ "$_DEBUG" = "yes" ]; then
		[ -n "${1-}" ] &&
			debugmsg="$1" ||
			debugmsg="Hmmm... no message sent to DEBUG function."
		echo "[$(date '+%Y-%m-%d %I:%M:%S')] $1" >> $_DEBUGLOG
	fi
}

# Writes to system log. One argument - the log line. PROGNAME must be set
# before this funtion. Requires logger.
function dolog {
	DEBUG "function dolog: Writing \""${1-}"\" to log."
	logline="$1"
	logger -t "$PROGNAME[$$]" "$logline" || >&2 echo "Error writing log line: $1"
}

# Simple way to exit on error - two arugment
# ARG1 = the text to output to STDERR
# ARG2 = the exit code you want to exit with (defaults to 1)
# Nice to call this with a check on $? or as the right side of an ||.
function errorexit {
	errortext="$1"
	exitcode="${2-"1"}" # if $2 is unset, value will be 1.
	DEBUG "In errorexit with errortext='$errortext' and exitcode='$exitcode'"
	>&2 echo -e "Error: $errortext" && dolog "Error: $errortext"
	exit $exitcode
}

# Usage... nuff said.

function usage {
cat <<ENDOFUSAGE

Usage: $PROGNAME [options]

All options needed should be set from the config file. These options are
provided so overriding the config is possible. Most are easier to simply
set in the config file aside from debug.

Options:
 -h                 Show usage.
 -c <config file>   Defaults to ${DEFCONFIG} if not provided. This
                    file must exist if config_file is not provided
                    as an argument.
 -l <list file>     File containing list of directories to back up.
                     config setting: listfile=<list file>
 -z                 Do compression (via gzip). Default = no.
                     config setting: compress=yes
 -e                 Do encryption (via gnupg). Default = no.
                     config setting: encrypt=yes
 -b <bucket name>   S3 bucket name.
                     config setting: bucket=<bucket name>
 -d                 Enable debug output
                     config setting: _DEBUG=yes

ENDOFUSAGE

}


# // MAIN PROGGY //

while getopts ":h :l: :c: :z :e :b: :d" opt
do
	case $opt in
		h)
			usage
			exit 0
			;;
		l)
			clo_listfile="$OPTARG"
			;;
		c)
			config="$OPTARG"
			;;
		z)
			clo_compress="yes"
			;;
		e)
			clo_encrypt="yes"
			;;
		b)
			clo_bucket="$OPTARG"
			;;
		d)
			_DEBUG="yes"
			DEBUG "Starting debug output for process id $$."
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			usage
			exit 1
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			usage
			exit 1
			;;
	esac
done


if [ "$config" = "" ]; then
	if [ ! -f "$DEFCONFIG" ]; then
		errorexit "No config file provided and default config ($DEFCONFIG) does not exist. Try $0 -h."
	else
		DEBUG "There is no config file set. Using default - '$DEFCONFIG'"
		config="$DEFCONFIG"
	fi
fi

# Source config file

DEBUG "Pulling in config from config file '$config'"
source "$config" || errorexit "Failed to source config file '$config'"

# Override config from CLI provided options
[ -n $clo_listfile ] && listfile=$clo_listfile
[ -n $clo_compress ] && compress=$clo_compress
[ -n $clo_encrypt ] && encrypt=$clo_encrypt
[ -n $clo_bucket ] && bucket=$clo_bucket

# Check that all required variables are set, otherwise error
misconf="" # "declaring"
[ -z $listfile ] && misconf+=" listfile"
[ -z $bucket ] && misconf+=" bucket"
[ -z $aws_access_key_id ] && misconf+=" aws_access_key_id"
[ -z $aws_secret_access_key ] && misconf+=" aws_secret_access-key"
if [ "$encrypt" = "yes" ]; then
	[ -z $passphrase ] && misconf+=" passphrase"
fi

if [ -n $misconf ]; then
	misconfmsg="The following config parameters are not set, but must be:"
	misconfmsg+="$misconf"
	errorexit "$misconfmsg"
fi


